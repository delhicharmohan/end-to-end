#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("wizpay:server");
const http = require("http");
const https = require("https");
const fs = require("fs");
const { initialize } = require("../socket"); // Import the socket.js file

/**
 * Get port from environment and store in Express.
 */

const httpPort = normalizePort(process.env.HTTP_PORT || "80");
const httpsPort = normalizePort(process.env.HTTPS_PORT || "443");

app.set("httpPort", httpPort);
app.set("httpsPort", httpsPort);

/**
 * Create HTTP server.
 */

// const httpServer = http.createServer(app);
const httpServer = http.createServer((req, res) => {

  res.writeHead(301, { "Location": `https://${req.headers.host}${req.url}` });

  res.end();

});

/**
 * Create HTTPS server.
 */

const privateKey = fs.readFileSync("/etc/letsencrypt/live/zinggale.com/privkey.pem", "utf8");
const certificate = fs.readFileSync("/etc/letsencrypt/live/zinggale.com/fullchain.pem", "utf8");

const credentials = { key: privateKey, cert: certificate };
const httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided ports, on all network interfaces.
 */

httpServer.listen(httpPort, '0.0.0.0');
httpServer.on("error", onError);
httpServer.on("listening", () => onListening("HTTP", httpPort));

httpsServer.listen(httpsPort, '0.0.0.0');
httpsServer.on("error", onError);
httpsServer.on("listening", () => onListening("HTTPS", httpsPort));

const path = "/wizpay-socket-path";

// Initialize Socket.IO using the HTTPS server
initialize(httpsServer, path);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof error.address === "string" ? "Pipe " + error.address : "Port " + error.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */

function onListening(protocol, port) {
  debug(`Listening on ${protocol} port ${port}`);
}
