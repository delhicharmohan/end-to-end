<template>
  <section @contextmenu.prevent class="h-full w-full flex flex-col bg-gray-50 justify-center items-center px-4 sm:px-0">
    <base-page-spinner v-if="showTransactionBar"></base-page-spinner>
    <base-dialog :show="!!error" title="An error occurred!" @close="closeTheDialogBox">
      <p>{{ error }}</p>
    </base-dialog>
    <transition v-if="showForm" name="slide-right" mode="out-in">
      <div key="1" v-if="isUpiIdSubmitted"
        class="w-100-per sm:w-400 bg-white shadow-lg rounded-none sm:rounded-lg border flex flex-col">
        <div v-if="paymentMethod === 'UPI'"
          class="flex justify-between items-center bg-wizpay-red p-4 text-white rounded-none sm:rounded-t-lg">
          <div>Payment Time Left</div>
          <vue-countdown class="flex items-center px-2 py-2 bg-timer" @start="countDownStarted"
            @progress="onCountdownProgress" @end="countDownEnd" :time="countDownLimit" v-slot="{ minutes, seconds }">
            <div>
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round"
                  d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div class="w-3 flex items-center ml-1">
              {{ minutes }}
            </div>
            <div class="flex items-center justify-center leading-none pb-1 mr-1">
              :
            </div>
            <div class="w-6 flex items-center">
              {{ seconds }}
            </div>
          </vue-countdown>
        </div>
        <div v-else class="flex justify-between items-center bg-wizpay-red p-4 text-white rounded-none sm:rounded-t-lg">
          <div>Payment Details</div>
        </div>
        <div class="flex flex-col items-center text-center p-4">
          <div @click.stop="openTicketForm" class="text-red-600 mb-4 font-bold cursor-pointer">Click Here for Old
            Payments
          </div>
          <div class="text-sm font-light">Transfer Amount</div>
          <div class="text-2xl font-bold flex items-center">
            <div>{{ amount }}</div>
            <div class="ml-2"><font-awesome-icon icon="fa-solid fa-inr" class="text-xl" /></div>
          </div>
          <div v-if="paymentMethod === 'UPI'" class="flex flex-col">


            <div class="grid grid-cols-2 gap-4 mt-4">

              <a @click.stop="setCustomerPaymentType('gpay')" target="_blank" :href="gpayLink"
                class="h-16 border-2 border-one p-2 rounded-lg flex justify-center">
                <div class="flex items-center">
                  <div>
                    <img class="h-12" src="../../assets/images/pay/gpay.png" alt="gpay" />
                  </div>
                  <div class="text-one font-bold">Google Pay</div>
                </div>
              </a>

              <a @click.stop="setCustomerPaymentType('phonepe')" target="_blank" :href="phonepeLink"
                class="h-16 border-2 border-one p-2 rounded-lg flex justify-center">
                <div class="flex items-center">
                  <div>
                    <img class="h-12" src="../../assets/images/pay/phonepe.png" alt="gpay" />
                  </div>
                  <div class="text-one font-bold ml-2">PhonePe</div>
                </div>
              </a>

              <a @click.stop="setCustomerPaymentType('paytm')" target="_blank" :href="paytmLink"
                class="h-16 border-2 border-one p-2 rounded-lg flex justify-center">
                <div class="flex items-center">
                  <div>
                    <img class="h-6" src="../../assets/images/pay/paytm.png" alt="gpay" />
                  </div>
                  <div class="text-one font-bold ml-2">Paytm</div>
                </div>
              </a>

              <div @click.stop="upiClicked"
                class="h-16 border-2 border-one p-2 rounded-lg flex justify-center cursor-pointer">
                <div class="flex items-center">
                  <div>
                    <img class="h-6" src="../../assets/images/pay/upi.png" alt="gpay" />
                  </div>
                  <div class="text-one font-bold ml-2">Other</div>
                </div>
              </div>

            </div>


            <div class="mt-4 font-bold">
              Scan QR to pay, or choose an app below
            </div>
            <div class="mt-8 font-bold">
              Do not screenshot the QR
            </div>
            <div class="mt-4 flex justify-center">
              <qr-code :text="qrCodeText" :size="getQrCodeSize" ref="qrCode"></qr-code>
            </div>
            <!-- <div class="mt-4 flex justify-center">
              <div
                @click.stop="downloadQrCode"
                class="cursor-pointer bg-wizpay-red rounded-lg px-4 py-2 text-white"
              >
                DOWNLOAD QR
              </div>
            </div> -->
            <div v-if="is_utr_enabled || showUtr">
              <div v-if="is_utr_enabled_submitted" style="height: 42px;" class="mt-4 flex justify-center items-center">
                <p class="text-center text-xs text-green-600">
                  UTR Submitted Successfully!
                </p>
              </div>
              <div v-else class="mt-4 flex flex-col">

                <div v-if="isShowAccountDetails" class="flex flex-col mb-4">
                  <div class="flex justify-between items-center flex-wrap mt-4">
                    <div class="block text-gray-800 text-lg font-medium">Account Number</div>
                    <div class="flex justify-start items-center flex-wrap">
                      <div class="text-gray-700 text-lg font-bold">{{ accountNumber }}</div>
                      <div class="ml-4">
                        <svg v-if="isAccountNumberCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                          fill="currentColor" class="w-5 h-5 cursor-pointer">
                          <title>Copied</title>
                          <path fill-rule="evenodd"
                            d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                            clip-rule="evenodd" />
                          <path
                            d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                          <path
                            d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                        </svg>
                        <svg v-else @click.stop="copyToClipBoardAccountNumber" xmlns="http://www.w3.org/2000/svg"
                          fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"
                          class="w-5 h-5 cursor-pointer">
                          <title>Copy to clipboard</title>
                          <path stroke-linecap="round" stroke-linejoin="round"
                            d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                        </svg>
                      </div>
                    </div>
                  </div>
                  <div class="flex justify-between items-center flex-wrap mt-4">
                    <div class="block text-gray-800 text-lg font-medium">IFSC</div>
                    <div class="flex justify-start items-center flex-wrap">
                      <div class="text-gray-700 text-lg font-bold">{{ ifsc }}</div>
                      <div class="ml-4">
                        <svg v-if="isIfscCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                          fill="currentColor" class="w-5 h-5 cursor-pointer">
                          <title>Copied</title>
                          <path fill-rule="evenodd"
                            d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                            clip-rule="evenodd" />
                          <path
                            d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                          <path
                            d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                        </svg>
                        <svg v-else @click.stop="copyToClipBoardIfsc" xmlns="http://www.w3.org/2000/svg" fill="none"
                          viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 cursor-pointer">
                          <title>Copy to clipboard</title>
                          <path stroke-linecap="round" stroke-linejoin="round"
                            d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                        </svg>
                      </div>
                    </div>
                  </div>
                  <div class="flex justify-between items-center flex-wrap mt-4">
                    <div class="block text-gray-800 text-lg font-medium">Bank Name</div>
                    <div class="flex justify-start items-center flex-wrap">
                      <div class="text-gray-700 text-lg font-bold">{{ bankName }}</div>
                      <div class="ml-4">
                        <svg v-if="isBankNameCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                          fill="currentColor" class="w-5 h-5 cursor-pointer">
                          <title>Copied</title>
                          <path fill-rule="evenodd"
                            d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                            clip-rule="evenodd" />
                          <path
                            d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                          <path
                            d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                        </svg>
                        <svg v-else @click.stop="copyToClipBoardBankName" xmlns="http://www.w3.org/2000/svg" fill="none"
                          viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 cursor-pointer">
                          <title>Copy to clipboard</title>
                          <path stroke-linecap="round" stroke-linejoin="round"
                            d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="w-full flex justify-between items-center">
                  <div class="flex-grow mr-2">
                    <input type="text" placeholder="Enter UTR" v-model="customerUtr.val"
                      @blur="clearValidity('customerUtr')" />
                  </div>
                  <div @click.stop="addCustomerUtr"
                    class="flex-shrink-0 ml-2 border px-4 py-2 bg-green-600 hover:bg-white text-white hover:text-green-600 border-green-600 rounded-md cursor-pointer">
                    Submit
                  </div>
                </div>
                <p v-if="!customerUtr.isValid" class="text-xs text-red-600 text-left">
                  {{ customerUtr.msg }}
                </p>
              </div>
            </div>
            <!-- <div class="mt-4 flex justify-center">
              <div
                @click.stop="copyToClipBoard"
                class="cursor-pointer bg-wizpay-red rounded-lg px-4 py-2 text-white uppercase"
              >
                Copy to clipboard
              </div>
            </div> -->
            <div class="mt-4 w-full flex items-center justify-center">
              <span class="text-gray-400 leading-none mr-1">Receipt:</span>
              <span class="text-lg font-medium leading-none uppercase">{{
                receiptId
                }}</span>
            </div>
            <div class="mt-4 font-bold text-red-600 text-sm">
              Click UPI to pay using other apps and enter UTR
            </div>
          </div>
          <div v-if="paymentMethod === 'Automatic Payment'" class="flex flex-col">
            <div class="flex justify-start items-center flex-wrap mt-4">
              <div class="text-gray-700 text-lg font-bold">Auto Approval Link</div>
              <div class="ml-4">
                <svg v-if="isAutoApprovallinkCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                  fill="currentColor" class="w-5 h-5 cursor-pointer">
                  <title>Copied</title>
                  <path fill-rule="evenodd"
                    d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                    clip-rule="evenodd" />
                  <path
                    d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                  <path
                    d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                </svg>
                <svg v-else @click.stop="copyToClipBoardAutoApprovallink" xmlns="http://www.w3.org/2000/svg" fill="none"
                  viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 cursor-pointer">
                  <title>Copy to clipboard</title>
                  <path stroke-linecap="round" stroke-linejoin="round"
                    d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                </svg>
              </div>
            </div>
            <div class="flex justify-center mt-4">
              <a :href="autoApprovallink" target="_blank"
                class="flex-shrink-0 border px-4 py-2 bg-green-600 hover:bg-white text-white hover:text-green-600 border-green-600 rounded-md cursor-pointer">OPEN</a>
            </div>
          </div>
          <div v-if="paymentMethod === 'Manual Bank'" class="flex flex-col">
            <div class="flex justify-between items-center flex-wrap mt-4">
              <div class="block text-gray-800 text-lg font-medium">Account Number</div>
              <div class="flex justify-start items-center flex-wrap">
                <div class="text-gray-700 text-lg font-bold">{{ accountNumber }}</div>
                <div class="ml-4">
                  <svg v-if="isAccountNumberCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                    fill="currentColor" class="w-5 h-5 cursor-pointer">
                    <title>Copied</title>
                    <path fill-rule="evenodd"
                      d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                      clip-rule="evenodd" />
                    <path
                      d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                    <path
                      d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                  </svg>
                  <svg v-else @click.stop="copyToClipBoardAccountNumber" xmlns="http://www.w3.org/2000/svg" fill="none"
                    viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 cursor-pointer">
                    <title>Copy to clipboard</title>
                    <path stroke-linecap="round" stroke-linejoin="round"
                      d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                  </svg>
                </div>
              </div>
            </div>
            <div class="flex justify-between items-center flex-wrap mt-4">
              <div class="block text-gray-800 text-lg font-medium">IFSC</div>
              <div class="flex justify-start items-center flex-wrap">
                <div class="text-gray-700 text-lg font-bold">{{ ifsc }}</div>
                <div class="ml-4">
                  <svg v-if="isIfscCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"
                    class="w-5 h-5 cursor-pointer">
                    <title>Copied</title>
                    <path fill-rule="evenodd"
                      d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                      clip-rule="evenodd" />
                    <path
                      d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                    <path
                      d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                  </svg>
                  <svg v-else @click.stop="copyToClipBoardIfsc" xmlns="http://www.w3.org/2000/svg" fill="none"
                    viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 cursor-pointer">
                    <title>Copy to clipboard</title>
                    <path stroke-linecap="round" stroke-linejoin="round"
                      d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                  </svg>
                </div>
              </div>
            </div>
            <div class="flex justify-between items-center flex-wrap mt-4">
              <div class="block text-gray-800 text-lg font-medium">Bank Name</div>
              <div class="flex justify-start items-center flex-wrap">
                <div class="text-gray-700 text-lg font-bold">{{ bankName }}</div>
                <div class="ml-4">
                  <svg v-if="isBankNameCopied" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
                    fill="currentColor" class="w-5 h-5 cursor-pointer">
                    <title>Copied</title>
                    <path fill-rule="evenodd"
                      d="M17.663 3.118c.225.015.45.032.673.05C19.876 3.298 21 4.604 21 6.109v9.642a3 3 0 01-3 3V16.5c0-5.922-4.576-10.775-10.384-11.217.324-1.132 1.3-2.01 2.548-2.114.224-.019.448-.036.673-.051A3 3 0 0113.5 1.5H15a3 3 0 012.663 1.618zM12 4.5A1.5 1.5 0 0113.5 3H15a1.5 1.5 0 011.5 1.5H12z"
                      clip-rule="evenodd" />
                    <path
                      d="M3 8.625c0-1.036.84-1.875 1.875-1.875h.375A3.75 3.75 0 019 10.5v1.875c0 1.036.84 1.875 1.875 1.875h1.875A3.75 3.75 0 0116.5 18v2.625c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 013 20.625v-12z" />
                    <path
                      d="M10.5 10.5a5.23 5.23 0 00-1.279-3.434 9.768 9.768 0 016.963 6.963 5.23 5.23 0 00-3.434-1.279h-1.875a.375.375 0 01-.375-.375V10.5z" />
                  </svg>
                  <svg v-else @click.stop="copyToClipBoardBankName" xmlns="http://www.w3.org/2000/svg" fill="none"
                    viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 cursor-pointer">
                    <title>Copy to clipboard</title>
                    <path stroke-linecap="round" stroke-linejoin="round"
                      d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 002.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 00-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5A3.375 3.375 0 006.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0015 2.25h-1.5a2.251 2.251 0 00-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 00-9-9z" />
                  </svg>
                </div>
              </div>
            </div>
            <div v-if="is_utr_enabled_submitted" style="height: 42px;" class="mt-4 flex justify-center items-center">
              <p class="text-center text-xs text-green-600">
                UTR Submitted Successfully!
              </p>
            </div>
            <div v-else class="mt-4 flex flex-col">
              <div class="w-full flex justify-between items-center">
                <div class="flex-grow mr-2">
                  <input type="text" placeholder="Enter UTR" v-model="customerUtr.val"
                    @blur="clearValidity('customerUtr')" />
                </div>
                <div @click.stop="addCustomerUtr"
                  class="flex-shrink-0 ml-2 border px-4 py-2 bg-green-600 hover:bg-white text-white hover:text-green-600 border-green-600 rounded-md cursor-pointer">
                  Submit
                </div>
              </div>
              <p v-if="!customerUtr.isValid" class="text-xs text-red-600 text-left">
                {{ customerUtr.msg }}
              </p>
            </div>
          </div>
        </div>
        <div class="flex bg-gray-100 rounded-b-lg p-4">
          <div v-if="paymentMethod === 'UPI'" class="grid grid-cols-4 gap-4 items-center">
            <div class="shadow-lg rounded-lg border-2 p-2 h-10 flex flex-col items-center justify-center">
              <a @click.stop="setCustomerPaymentType('paytm')" target="_blank" :href="paytmLink">
                <img class="h-6 object-contain" src="../../assets/images/paytm1.png" alt="upi" />
              </a>
            </div>
            <div class="shadow-lg rounded-lg border-2 p-2 h-10 flex flex-col items-center justify-center">
              <a @click.stop="setCustomerPaymentType('gpay')" target="_blank" :href="gpayLink">
                <img class="h-6 object-contain" src="../../assets/images/gpay2.png" alt="gpay" />
              </a>
            </div>
            <div class="shadow-lg rounded-lg border-2 p-2 h-10 flex flex-col items-center justify-center">
              <a @click.stop="setCustomerPaymentType('phonepe')" target="_blank" :href="phonepeLink">
                <img class="h-6 object-contain" src="../../assets/images/phonepe1.png" alt="phonepe" />
              </a>
            </div>
            <div @click.stop="upiClicked"
              class="shadow-lg rounded-lg border-2 p-2 h-10 flex flex-col items-center justify-center cursor-pointer">
              <img class="h-6 object-contain" src="../../assets/images/upi1.png" alt="upi" />
            </div>
          </div>
          <div v-if="paymentMethod === 'Automatic Payment'" class="flex justify-center">
            <p class="text-sm text-center font-bold">Automatic Payment Text</p>
          </div>
          <div v-if="paymentMethod === 'Manual Bank'" class="flex justify-center">
            <p class="text-sm text-center font-bold">Please make a payment to the above account details to complete your
              transaction and enter the UTR</p>
          </div>
        </div>
        <!-- <div @click.stop="unableToPay" class="bg-red-600 text-white text-center p-4 rounded-b-lg font-bold cursor-pointer">Click Here if unable to pay</div> -->
      </div>
      <base-card key="2" v-else>
        <form @submit.prevent="submitForm" class="w-100-per sm:w-400 p-4">
          <div class="flex justify-center">
            <img class="h-20" src="../../assets/images/logo.jpg" />
          </div>
          <div class="mt-4" :class="{ invalid: !customerUpiId.isValid }">
            <label class="text-sm text-center" for="customerUpiId">Please Enter Your Correct UPI ID</label>
            <input type="text" id="customerUpiId" v-model.trim="customerUpiId.val"
              @blur="clearValidity('customerUpiId')" />
          </div>
          <p v-if="!formIsValid" class="text-xs text-red-600">
            {{ customerUpiId.msg }}
          </p>
          <div class="flex justify-center mt-4">
            <base-button>Next</base-button>
          </div>
        </form>
      </base-card>
    </transition>

    <div class="success-message fixed z-50 text-white rounded-lg p-2 bg-green-500" v-if="isVisible">
      <div class="flex items-center">
        <span class="icon mr-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
            stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round"
              d="M9 12.75L11.25 15 15 9.75M21 12c0 1.268-.63 2.39-1.593 3.068a3.745 3.745 0 01-1.043 3.296 3.745 3.745 0 01-3.296 1.043A3.745 3.745 0 0112 21c-1.268 0-2.39-.63-3.068-1.593a3.746 3.746 0 01-3.296-1.043 3.745 3.745 0 01-1.043-3.296A3.745 3.745 0 013 12c0-1.268.63-2.39 1.593-3.068a3.745 3.745 0 011.043-3.296 3.746 3.746 0 013.296-1.043A3.746 3.746 0 0112 3c1.268 0 2.39.63 3.068 1.593a3.746 3.746 0 013.296 1.043 3.746 3.746 0 011.043 3.296A3.745 3.745 0 0121 12z" />
          </svg>
        </span>
        <span class="text">{{ message }}</span>
      </div>
    </div>

    <transition name="fade" mode="out-in">
      <base-full-modal v-if="showTicketForm" :title="`Create Ticket`" @close="closeFullModal">
        <create-ticket class="text-left p-8" :vendor="vendorName" @created="onTicketCreated" @failed="onTicketFailed"
          @close="closeFullModal"></create-ticket>
      </base-full-modal>
    </transition>

  </section>
</template>
<script>
import VueCountdown from "@chenfengyuan/vue-countdown";
import http from "../../http-common.js";
import VueQRCodeComponent from "vue-qrcode-component";
import html2canvas from "html2canvas";
import { saveAs } from "file-saver";
import io from "socket.io-client";
import CreateTicket from "./create-ticket.vue";
export default {
  name: "pay",
  props: ["id"],
  components: {
    VueCountdown,
    "qr-code": VueQRCodeComponent,
    CreateTicket,
  },
  data() {
    return {
      customerUpiId: {
        val: "",
        isValid: true,
        msg: "",
      },
      formIsValid: true,
      isUpiIdSubmitted: false,
      countDownLimit: 300000,
      intervalId: null,
      confettiActive: true,
      qrCodeText: "",
      error: null,
      showForm: false,
      amount: null,
      receiptId: null,
      returnUrl: null,
      isVisible: false,
      message: "Payment received successfully!",
      validatorUPIID: "",
      gpayLink: "",
      paytmLink: "",
      phonepeLink: "",
      showTransactionBar: false,
      socket: null,
      is_utr_enabled: false,
      customerUtr: {
        val: "",
        isValid: true,
        msg: "",
      },
      is_utr_enabled_submitted: false,
      vendorName: "",
      showUtr: false,
      paymentMethod: "UPI",
      accountNumber: "",
      ifsc: "",
      bankName: "",
      isAccountNumberCopied: false,
      isIfscCopied: false,
      isBankNameCopied: false,
      showTicketForm: false,
      autoApprovallink: "",
      isAutoApprovallinkCopied: false,
    };
  },
  watch: {
    isAutoApprovallinkCopied(newVal) {
      if (newVal) {
        setTimeout(() => {
          this.isAutoApprovallinkCopied = false;
        }, 100)
      }
    },
    isAccountNumberCopied(newVal) {
      if (newVal) {
        setTimeout(() => {
          this.isAccountNumberCopied = false;
        }, 3000)
      }
    },
    isIfscCopied(newVal) {
      if (newVal) {
        setTimeout(() => {
          this.isIfscCopied = false;
        }, 3000)
      }
    },
    isBankNameCopied(newVal) {
      if (newVal) {
        setTimeout(() => {
          this.isBankNameCopied = false;
        }, 3000)
      }
    },
  },
  computed: {
    isShowAccountDetails() {
      if (this.accountNumber && this.ifsc && this.bankName) {
        return true;
      } else {
        return false;
      }
    },
    getQrCodeSize() {
      if (window.innerWidth > 639) {
        return 256;
      } else {
        return 128;
      }
    },
  },
  created() {
    this.skipUpdateCustomerUpiId();
    this.socket = io(process.env.VUE_APP_SOCKET_URL, {
      path: "/wizpay-socket-path",
    });

    // Handle events
    this.socket.on("connect", () => {
      console.log("Connected to server");
    });

    this.socket.on("disconnect", () => {
      console.log("Disconnected from server");
    });
    this.checkTheOrderExist();
  },
  methods: {
    clearValidity(input) {
      this[input].isValid = true;
      this[input].msg = "";
    },
    validateForm() {
      this.formIsValid = true;
      if (this.customerUpiId.val === "") {
        this.customerUpiId.isValid = false;
        this.customerUpiId.msg = "You must enter UPI ID.";
        this.formIsValid = false;
      } else {
        const isValidUpiId = /^[\w.-]+@[\w.-]+$/.test(this.customerUpiId.val);
        if (!isValidUpiId) {
          this.customerUpiId.isValid = false;
          this.customerUpiId.msg = "Please enter a valid UPI ID.";
          this.formIsValid = false;
        }
      }
    },
    async skipUpdateCustomerUpiId() {
      try {
        const response = await http.post(`/orders/${this.id}/customerUpiId`, {
          customerUPIID: this.customerUpiId.val,
        });
        if (response.status == 201) {
          this.generateUpiQrCodeString(response.data.data);
          this.isUpiIdSubmitted = true;
        } else {
          alert("error");
        }
      } catch (error) {
        console.log(error);
      }
    },
    async submitForm() {
      this.validateForm();
      if (!this.formIsValid) {
        return;
      }

      try {
        const response = await http.post(`/orders/${this.id}/customerUpiId`, {
          customerUPIID: this.customerUpiId.val,
        });
        if (response.status == 201) {
          this.generateUpiQrCodeString(response.data.data);
          this.isUpiIdSubmitted = true;
        } else {
          alert("error");
        }
      } catch (error) {
        console.log(error);
      }
    },
    countDownStarted() {
      this.socket.on(`${this.vendorName}-order-approved-${this.id}`, (data) => {
        this.checkOrderStatus(data);
      });
      // Set interval to call the API every 30 seconds
      this.intervalId = setInterval(() => {
        this.checkPaymentStatus();
      }, 15000);
    },
    countDownEnd() {
      if (this.socket) {
        this.socket.disconnect();
      }
      if (this.returnUrl) {
        window.location.href = this.returnUrl;
      } else {
        this.$router.replace("/success");
      }
    },
    checkAutoOrderStatus(approvedData) {
      if (
        approvedData.refID == this.id &&
        approvedData.paymentStatus == "approved"
      ) {
        this.showTransactionBar = false;
        this.countDownLimit = 0;
        this.$confetti.start();
        this.showMessage();
        setTimeout(() => {
          this.$confetti.stop();
          this.amount = null;
          this.receiptId = null;
          this.validatorUPIID = "";
          if (this.returnUrl) {
            window.location.href = this.returnUrl;
          } else {
            this.$router.replace("/success");
          }
        }, 3000);
      } else {
        alert('Your Payment Failed');
        if (this.returnUrl) {
          window.location.href = this.returnUrl;
        } else {
          this.$router.replace("/failed");
        }
      }
    },
    checkOrderStatus(approvedData) {
      if (
        approvedData.refID == this.id &&
        approvedData.paymentStatus == "approved"
      ) {
        this.showTransactionBar = false;
        this.countDownLimit = 0;
        this.$confetti.start();
        this.showMessage();
        setTimeout(() => {
          this.$confetti.stop();
          this.amount = null;
          this.receiptId = null;
          this.validatorUPIID = "";
          if (this.returnUrl) {
            window.location.href = this.returnUrl;
          } else {
            this.$router.replace("/success");
          }
        }, 3000);
      }
    },
    generateUpiQrCodeString(data) {
      this.validatorUPIID = data.validatorUPIID;
      const paying = data.clientName;
      this.amount = data.amount;
      this.receiptId = data.receiptId;
      this.returnUrl = data.returnUrl;
      this.qrCodeText = `upi://pay?pa=${this.validatorUPIID}&pn=${paying}&tr=${this.receiptId}&tn=${this.receiptId}&am=${this.amount}&cu=INR`;
      this.gpayLink = `gpay://upi/pay?pa=${this.validatorUPIID}&pn=${paying}&tr=${this.receiptId}&tn=${this.receiptId}&am=${this.amount}&cu=INR`;
      this.paytmLink = `paytmmp://pay?pa=${this.validatorUPIID}&pn=${paying}&tr=${this.receiptId}&tn=${this.receiptId}&am=${this.amount}&cu=INR`;
      this.phonepeLink = `phonepe://pay?pa=${this.validatorUPIID}&pn=${paying}&tr=${this.receiptId}&tn=${this.receiptId}&am=${this.amount}&cu=INR`;
    },
    downloadQrCode() {
      // Use html2canvas to capture a screenshot of the QR code element
      html2canvas(this.$refs.qrCode.$el).then((canvas) => {
        // Convert canvas to image data URL
        const imageDataUrl = canvas.toDataURL("image/png");

        // Use FileSaver.js to save the file
        saveAs(imageDataUrl, "qr-code.png");
      });
    },
    async checkTheOrderExist() {
      let url = `/orders/${this.id}`;
      const data = { apiType: "payment" };
      try {
        const response = await http.get(url, { params: data });
        if (response.status == 200) {
          this.is_utr_enabled = response.data.is_utr_enabled;
          this.showForm = true;
          this.vendorName = response.data.vendor;
          this.paymentMethod = response.data.paymentMethod;
          if (this.paymentMethod === "Manual Bank") {
            this.socket.on(`${this.vendorName}-order-approved-${this.id}`, (data) => {
              this.checkOrderStatus(data);
            });
          } else if (this.paymentMethod === "Automatic Payment") {

            if (response.data.paymentStatus != 'pending') {
              this.checkAutoOrderStatus(
                {
                  refID: this.id,
                  paymentStatus: response.data.paymentStatus,
                }
              );
            } else {
              this.socket.on(`auto-order-approved-${this.id}`, (data) => {
                this.checkAutoOrderStatus(data);
              });

              const refId = response.data.refID;
              const token = response.data.token;
              const amount = response.data.amount;
              const merchantCode = response.data.merchantCode;
              const merchantName = response.data.merchantName;
              const receiptId = response.data.receiptId;
              const upi = this.validatorUPIID;
              const url = `https://zinggale.com?refId=${refId}&upi=${upi}&amount=${amount}&receiptId=${receiptId}&merchantCode=${merchantCode}&merchantName=${merchantName}&token=${token}`;
              const encodedUrl = encodeURIComponent(url);
              const redirectUrl = `https://zinggale.page.link/?link=${encodedUrl}&apn=com.zinggale.upipayment&efr=1`;
              // this.showTransactionBar = true;
              // window.location.href = redirectUrl;
              // window.open(redirectUrl, '_blank');
              this.autoApprovallink = redirectUrl;
            }
          }
          this.accountNumber = response.data.accountNumber;
          this.ifsc = response.data.ifsc;
          this.bankName = response.data.bankName;
        }
      } catch (error) {
        if (error.response.status == 406) {
          this.error =
            "Transaction can not be processed at this time. Assigned user is not logged in or inactive.";
        } else {
          this.error = error.response.data.message || "Something failed!";
          this.returnUrl = error.response.data.returnUrl || "";
        }
      }
    },
    showMessage() {
      this.isVisible = true;
      setTimeout(() => {
        this.isVisible = false;
      }, 3000);
    },
    copyToClipBoardAutoApprovallink() {
      navigator.clipboard.writeText(this.autoApprovallink);
      this.isAutoApprovallinkCopied = true;
    },
    copyToClipBoardAccountNumber() {
      navigator.clipboard.writeText(this.accountNumber);
      this.isAccountNumberCopied = true;
    },
    copyToClipBoardIfsc() {
      navigator.clipboard.writeText(this.ifsc);
      this.isIfscCopied = true;
    },
    copyToClipBoardBankName() {
      navigator.clipboard.writeText(this.bankName);
      this.isBankNameCopied = true;
    },
    async copyToClipBoard() {
      navigator.clipboard.writeText(this.validatorUPIID);
      await this.setCustomerPaymentType("copy_to_clipboard");
    },
    onCountdownProgress(event) {
      if (event.minutes == 0 && event.seconds >= 30) {
        // this.showTransactionBar = true;
      }
    },
    closeTheDialogBox() {
      this.error = null;
      if (this.returnUrl) {
        window.location.href = this.returnUrl;
      } else {
        this.$router.replace("/success");
      }
    },
    async setCustomerPaymentType(customerPaymentType) {
      try {
        const response = await http.post(
          `/orders/${this.id}/setCustomerPaymentType`,
          {
            customerPaymentType: customerPaymentType,
          }
        );
        if (response.status == 201) {
          console.log(response);
        } else {
          console.log(response);
        }
      } catch (error) {
        console.log(error);
      }
    },
    async checkPaymentStatus() {
      let url = `/orders/${this.id}`;
      try {
        const response = await http.get(url);
        if (response.status == 200) {
          if (response.data.paymentStatus == "approved") {
            this.showTransactionBar = false;
            this.countDownLimit = 0;
            this.$confetti.start();
            this.showMessage();
            setTimeout(() => {
              this.$confetti.stop();
              this.amount = null;
              this.receiptId = null;
              this.validatorUPIID = "";
              if (this.returnUrl) {
                window.location.href = this.returnUrl;
              } else {
                this.$router.replace("/success");
              }
            }, 3000);
            clearInterval(this.intervalId);
          }
        }
      } catch (error) {
        console.log(error);
      }
    },
    async addCustomerUtr() {
      if (this.customerUtr.val == "") {
        this.customerUtr.msg = "You must enter UTR";
        this.customerUtr.isValid = false;
      } else {
        try {
          const response = await http.post(
            `/orders/${this.id}/addCustomerUtr`,
            {
              customerUtr: this.customerUtr.val,
            }
          );
          if (response.status == 201) {
            this.is_utr_enabled_submitted = true;
            if (this.paymentMethod === 'Manual Bank') {
              this.intervalId = setInterval(() => {
                this.checkPaymentStatus();
              }, 5000);
              this.showTransactionBar = true;
            }
          } else {
            console.log(response);
          }
        } catch (error) {
          console.log(error);
        }
      }
    },
    upiClicked() {
      if (!this.showUtr) {
        this.showUtr = true;
        this.countDownLimit = 600000;
      }
    },
    openTicketForm() {
      this.showTicketForm = true;
    },
    closeFullModal() {
      this.showTicketForm = false;
    },
    onTicketCreated() {
      this.$swal.fire(
        "Success!",
        "Your ticket has been successfully submitted. Our team will review it shortly.",
        "success"
      ).then((result) => {
        if (result.value || result.dismiss) {
          this.showTicketForm = false;
          if (this.returnUrl) {
            window.location.href = this.returnUrl;
          } else {
            this.$router.replace("/success");
          }
        }
      })
    },
    onTicketFailed(msg) {
      this.$swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: msg,
      }).then((result) => {
        if (result.value || result.dismiss) {
          this.showTicketForm = false;
          if (this.returnUrl) {
            window.location.href = this.returnUrl;
          } else {
            this.$router.replace("/success");
          }
        }
      })
    },
    async unableToPay() {
      try {
        const response = await http.post(`/orders/${this.id}/unableToPay`);
        if (response.status == 200) {
          this.$swal.fire(
            "Please try again!",
            "We apologize for any inconvenience caused.",
            "success"
          ).then((result) => {
            if (result.value || result.dismiss) {
              if (this.returnUrl) {
                window.location.href = this.returnUrl;
              } else {
                this.$router.replace("/success");
              }
            }
          })
        } else {
          this.$swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: "Please try again. Something went wrong!",
          }).then((result) => {
            if (result.value || result.dismiss) {
              if (this.returnUrl) {
                window.location.href = this.returnUrl;
              } else {
                this.$router.replace("/success");
              }
            }
          })
        }
      } catch (error) {
        this.$swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: error,
        }).then((result) => {
          if (result.value || result.dismiss) {
            if (this.returnUrl) {
              window.location.href = this.returnUrl;
            } else {
              this.$router.replace("/success");
            }
          }
        })
      }
    },
  },
  beforeUnmount() {
    if (this.socket) {
      this.socket.disconnect();
    }
    clearInterval(this.intervalId);
  },
};
</script>

<style lang="scss" scoped>
@responsive {
  .w-400 {
    width: 400px;
  }

  .w-100-per {
    width: 100%;
  }
}

.slide-right-enter-from {
  opacity: 0;
  transform: translateX(-30px);
}

.slide-right-leave-to {
  opacity: 0;
  transform: translateX(30px);
}

.slide-right-enter-active {
  transition: all 0.3s ease-out;
}

.slide-right-leave-active {
  transition: all 0.3s ease-in;
}

.slide-right-enter-to,
.slide-right-leave-from {
  opacity: 1;
  transform: translateX(0);
}

.bg-wizpay-red {
  background-color: #C62A2B;
}

.bg-timer {
  background-color: #ffffff47;
}

.success-message {
  background-color: #28a745;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}
</style>
